name: Python CD Pipeline

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      ENV:
        required: true
        type: string
        description: |
          one of 'dev' or 'prod'
      GIT_REF:
        required: true
        type: string
        description: |
          git sha of the commit to build (only for dev) and deploy
      BUILD_MIGRATIONS:
        required: false
        type: boolean
        default: false
        description: |
          if true, it expects to find the conventional migrations folder under `/db`
      POETRY_VERSION:
        required: false
        type: string
        default: "1.4.1"
      EXPORT_REQUIREMENTS:
        required: false
        type: boolean
        default: false
        description: |
          if true, before building the service docker image it will use poetry to generate the requirements file
      PREDEPLOY_GOMPLATE_ARGS:
        required: false
        type: string
        description: command options to pass to the gomplate cli right before the deploy script
      AWS_ACCOUNT:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      AWS_ROLE_TO_ASSUME:
        required: true
        type: string
      SLACK_CHANNEL:
        required: false
        type: string

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      host-registry: ${{ steps.registry.outputs.host-registry }}
      repo-registry: ${{ steps.registry.outputs.repo-registry }}
    steps:
      - name: Check Inputs
        shell: python
        run: |
          if "${{ inputs.ENV }}" not in ["dev", "prod"]:
            raise ValueError("Invalid ENV input. Expected dev or prod")

      - name: Concat Container Registry
        id: registry
        run: |
          HOST_REGISTRY="${{ inputs.AWS_ACCOUNT }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com"
          REPO_REGISTRY="${{ inputs.AWS_ACCOUNT }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/mirta/${{ inputs.SERVICE_NAME }}"
          echo "host-registry=$HOST_REGISTRY" >> $GITHUB_OUTPUT
          echo "repo-registry=$REPO_REGISTRY" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: init
    if: ${{ inputs.ENV == 'dev' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.GIT_REF }}

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure ${{ inputs.ENV }} AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.LAMBDA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.LAMBDA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-to-assume: ${{ inputs.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ inputs.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ needs.init.outputs.host-registry }}

      - name: Generate Migrations tags and image meta
        if: ${{ inputs.BUILD_MIGRATIONS }}
        id: meta-migrations
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.init.outputs.repo-registry }}
          tags: |
            type=raw,value=migrations-${{ inputs.GIT_REF }}

      - name: Build and push Migrations image
        if: ${{ inputs.BUILD_MIGRATIONS }}
        uses: docker/build-push-action@v4
        with:
          ssh: default
          push: true
          context: ./db
          file: ./db/aws/Dockerfile.migrations
          tags: ${{ steps.meta-migrations.outputs.tags }}
          labels: ${{ steps.meta-migrations.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Install Poetry
        if: ${{ inputs.EXPORT_REQUIREMENTS }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Export requirements
        if: ${{ inputs.EXPORT_REQUIREMENTS }}
        run: poetry export -f requirements.txt --output requirements.txt --only main --without-hashes

      - name: Generate tags and image meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.init.outputs.repo-registry }}
          tags: |
            type=raw,value=${{ inputs.GIT_REF }}

      - name: Build and push lambdas image
        uses: docker/build-push-action@v4
        with:
          ssh: default
          push: true
          context: .
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy:
    runs-on: ubuntu-latest
    needs: [init, build]
    # ! https://github.com/actions/runner/issues/491
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    steps:
      - name: Checkout project repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.GIT_REF }}

      - name: Checkout Reusable Workflows repo
        uses: actions/checkout@v4
        with:
          repository: mirta-com/workflows
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          path: workflows-repo

      - name: Prep deploy details
        run: |
          echo "repo-url=https://github.com/${{ github.repository }}" >> $GITHUB_ENV
          echo "sha-url=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_ENV

      - name: Notify Slack Start
        id: slack
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_DEPLOY_BOT_TOKEN }}
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployment started - <${{ env.repo-url }} | ${{ github.repository }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Job:* <${{ env.sha-url }}/checks | ${{ github.workflow }}>\n*Author:* ${{ github.triggering_actor }}\n*Commit:* <${{ env.sha-url }} | ${{ github.sha }}>\n*Attempt #:* ${{ github.run_attempt }}"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://i.postimg.cc/fJWsyZLp/Warning-3.png",
                    "alt_text": "warning"
                  }
                }
              ]
            }

      - name: Configure ${{ inputs.ENV }} AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.LAMBDA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.LAMBDA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
          role-to-assume: ${{ inputs.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200

      - name: Pre-deploy template rendering
        if: ${{ inputs.PREDEPLOY_GOMPLATE_ARGS != '' }}
        uses: ./workflows-repo/.github/actions/gomplate
        with:
          ARGS: ${{ inputs.PREDEPLOY_GOMPLATE_ARGS }}

      - name: Deploy to ${{ inputs.ENV }}
        id: deploy-script
        run: ${GITHUB_WORKSPACE}/workflows-repo/deploy.sh
        env:
          PROJECT_ID: ${{ inputs.SERVICE_NAME }}
          DEPLOY_ENV: ${{ inputs.ENV }}
          AWS_ACCOUNT: ${{ inputs.AWS_ACCOUNT }}
          AWS_REGION: ${{ inputs.AWS_REGION }}
          TEMPLATE_PATH: template.yml
          VERSION: ${{ inputs.GIT_REF }}
          IMAGE_REPO: ${{ needs.init.outputs.repo-registry }}
          IMAGE_TAG: ${{ inputs.GIT_REF }}
          SAM_CLI_TELEMETRY: 0

      - name: Run ${{ inputs.ENV }} Post Deploy
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GH_API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/mirta-com/aws-tools/dispatches \
            -d "{\"event_type\":\"deploy\", \"client_payload\":{\"env\":\"${{ inputs.ENV }}\"}}"

      - name: Notify Slack Success
        if: ${{ steps.deploy-script.outcome == 'success' && inputs.SLACK_CHANNEL != '' }}
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_DEPLOY_BOT_TOKEN }}
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployment succeeded - <${{ env.repo-url }} | ${{ github.repository }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Job:* <${{ env.sha-url }}/checks | ${{ github.workflow }}>\n*Author:* ${{ github.triggering_actor }}\n*Commit:* <${{ env.sha-url }} | ${{ github.sha }}>\n*Attempt #:* ${{ github.run_attempt }}"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://i.postimg.cc/nCdJQ59z/Pass-3.png",
                    "alt_text": "success"
                  }
                }
              ]
            }

      - name: Notify Slack Fail
        if: ${{ failure() && inputs.SLACK_CHANNEL != '' }}
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_DEPLOY_BOT_TOKEN }}
        with:
          channel-id: ${{ inputs.SLACK_CHANNEL }}
          update-ts: ${{ steps.slack.outputs.ts }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployment failed - <${{ env.repo-url }} | ${{ github.repository }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Job:* <${{ env.sha-url }}/checks | ${{ github.workflow }}>\n*Author:* ${{ github.triggering_actor }}\n*Commit:* <${{ env.sha-url }} | ${{ github.sha }}>\n*Attempt #:* ${{ github.run_attempt }}"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://i.postimg.cc/qgx0pgk2/Fail-3.png",
                    "alt_text": "fail"
                  }
                }
              ]
            }
